library(mise)
print('teste') 
mise()
plot('x')
gc()
rm(list = ls())
options(scipen=999)#Não utilizar notação cientifica
options(digits=5) 

library(dplyr)
library(randomForest)
nfold_check<-function(y_test,y_model_prob,infoextra=c(),infoextra2=c()){
  df<-data.frame(ytest =y_test,yprobpred=y_model_prob )
  df<-df[sample(nrow(df)),]	
  print("------------------------------------------------------------------")
  print(infoextra)
  print(infoextra2)
  
  set.seed(123)
  p<-2.5
  n1<-1
  tabela_resumo <- data.frame(P=0,T0M0=0,T1M1=0,T1M0=0,T0M1=0)
  while (p<=99){
    tabela_resumo[n1,"P"]<-p/100
    tabela_resumo[n1,"T1M1"]<-NROW(df[df$yprobpred>=p/100 & df$ytest==1,])
    tabela_resumo[n1,"T1M0"]<-NROW(df[df$yprobpred<p/100 & df$ytest==1,])
    tabela_resumo[n1,"T0M0"]<-NROW(df[df$yprobpred<p/100 & df$ytest==0,])
    tabela_resumo[n1,"T0M1"]<-NROW(df[df$yprobpred>=p/100 & df$ytest==0,])
    n1<-n1+1
    p<-p+1.25
  }
  
  tabela_resumo$recall<- tabela_resumo$T1M1/(tabela_resumo$T1M1+tabela_resumo$T1M0)
  tabela_resumo$precision<- tabela_resumo$T1M1/(tabela_resumo$T1M1+tabela_resumo$T0M1)
  tabela_resumo$F1<- 2*(tabela_resumo$precision*tabela_resumo$recall)/(tabela_resumo$recall+tabela_resumo$precision)
  tabela_resumo$acuracia<-(tabela_resumo$T1M1+tabela_resumo$T0M0)/(tabela_resumo$T1M1+tabela_resumo$T0M0+tabela_resumo$T1M0+tabela_resumo$T0M1)
  tabela_resumo$abserrordif<-abs(tabela_resumo$T0M1-tabela_resumo$T1M0)
  tabela_resumo$MCC<-(tabela_resumo$T1M1*tabela_resumo$T0M0 - tabela_resumo$T0M1*tabela_resumo$T1M0)/
    sqrt((tabela_resumo$T1M1+tabela_resumo$T0M1)*(tabela_resumo$T1M1+tabela_resumo$T1M0)*
           (tabela_resumo$T0M0+tabela_resumo$T0M1)*(tabela_resumo$T0M0+tabela_resumo$T1M0))
  
  #coloca NA em dados infinitos
  tabela_resumo[mapply(is.infinite, tabela_resumo)] <- 0
  
  tabela_resumo[,c(1,9)]
  #points(tabela_resumo[,c('P','recall')],col="green", xlim=c(0,1), ylim=c(0,1))
  #points(tabela_resumo[,c('P','F1')],col="red", xlim=c(0,1), ylim=c(0,1))
  #points(tabela_resumo[,c('P','precision')],col="blue", xlim=c(0,1), ylim=c(0,1))
  #points(tabela_resumo[,c('P','acuracia')],col="yellow", xlim=c(0,1), ylim=c(0,1))
  
  plot(x=tabela_resumo[,'P'], y=tabela_resumo[,'F1'], main = "F1",
       xlab = "Cutoff", ylab = "%", xlim = c(0,1), ylim = c(0,1),pch = 19, frame = FALSE,col="green")
  
  cutoff_indicado<-mean(tabela_resumo[tabela_resumo[,8]==max(tabela_resumo[,8],na.rm=TRUE),1])
  cutoff_indicado1<-mean(tabela_resumo[tabela_resumo[,9]==max(tabela_resumo[,9],na.rm=TRUE),1])
  cutoff_indicado2<-mean(tabela_resumo[tabela_resumo[,10]==min(tabela_resumo[,10],na.rm=TRUE),1])
  cutoff_indicado3<-mean(tabela_resumo[tabela_resumo[,11]==max(tabela_resumo[,11],na.rm=TRUE),1])
  
  if(is.na(cutoff_indicado)){cutoff_indicado<-0}
  if(is.na(cutoff_indicado1)){cutoff_indicado1<-0}
  if(is.na(cutoff_indicado2)){cutoff_indicado2<-0}
  if(is.na(cutoff_indicado3)){cutoff_indicado3<-0}
  
  
  for(cutoff_uso in c(cutoff_indicado)){#,cutoff_indicado1,cutoff_indicado2,cutoff_indicado3
    
    if(cutoff_indicado==cutoff_uso){
      print(paste('Cutoff indicado (F1 Máximo): ',cutoff_uso))
    }else{
      if(cutoff_indicado1==cutoff_uso){
        print(paste('Cutoff indicado (Acurácia Máxima): ',cutoff_uso))
      }else{
        if(cutoff_indicado2==cutoff_uso){
          print(paste('Cutoff indicado (Balanceado): ',cutoff_uso))
        }else{
          if(cutoff_indicado3==cutoff_uso){
            print(paste('Cutoff indicado (MCC): ',cutoff_uso))
          }
        }
      }
    }
    
    Union_table<-data.frame(TARGET =df$ytest,PRED_DEF=ifelse(df$yprobpred>=cutoff_uso,1,0) )
    print(prop.table(table(Union_table[,c('TARGET','PRED_DEF')]))*100)
    print(table(Union_table[,c('TARGET','PRED_DEF')]))
    
    tabela_resumo <- data.frame(n=0,T0M0=0,T1M1=0,T1M0=0,T0M1=0)
    folds <- cut(seq(1,nrow(df)),breaks=10,labels=FALSE)	
    #Perform 10 fold cross validation
    for(i in 1:10){
      #Segment your data by fold using the which() function 
      testIndexes <- which(folds==i,arr.ind=TRUE)
      df_temp<-df[testIndexes,]
      
      tabela_resumo[i,"n"]<-i
      tabela_resumo[i,"T1M1"]<-NROW(df_temp[df_temp$yprobpred>=cutoff_uso & df_temp$ytest==1,])
      tabela_resumo[i,"T1M0"]<-NROW(df_temp[df_temp$yprobpred<cutoff_uso & df_temp$ytest==1,])
      tabela_resumo[i,"T0M0"]<-NROW(df_temp[df_temp$yprobpred<cutoff_uso & df_temp$ytest==0,])
      tabela_resumo[i,"T0M1"]<-NROW(df_temp[df_temp$yprobpred>=cutoff_uso & df_temp$ytest==0,])
    }
    
    tabela_resumo$recall<- tabela_resumo$T1M1/(tabela_resumo$T1M1+tabela_resumo$T1M0)
    tabela_resumo$precision<- tabela_resumo$T1M1/(tabela_resumo$T1M1+tabela_resumo$T0M1)
    tabela_resumo$F1<- 2*(tabela_resumo$precision*tabela_resumo$recall)/(tabela_resumo$recall+tabela_resumo$precision)
    tabela_resumo$Acuracia<-(tabela_resumo$T1M1+tabela_resumo$T0M0)/(tabela_resumo$T1M1+tabela_resumo$T0M0+tabela_resumo$T1M0+tabela_resumo$T0M1)
    tabela_resumo$MCC<-(tabela_resumo$T1M1*tabela_resumo$T0M0 - tabela_resumo$T0M1*tabela_resumo$T1M0)/
      sqrt((tabela_resumo$T1M1+tabela_resumo$T0M1)*(tabela_resumo$T1M1+tabela_resumo$T1M0)*
             (tabela_resumo$T0M0+tabela_resumo$T0M1)*(tabela_resumo$T0M0+tabela_resumo$T1M0))
    tabela_resumo<-tabela_resumo[,c("n","Acuracia","F1","recall","precision","MCC")]
    
    tabela_resumo[11,1]<-'Mean'
    tabela_resumo[11,2]<-mean(tabela_resumo[1:10,2],na.rm=TRUE)
    tabela_resumo[11,3]<-mean(tabela_resumo[1:10,3],na.rm=TRUE)
    tabela_resumo[11,4]<-mean(tabela_resumo[1:10,4],na.rm=TRUE)
    tabela_resumo[11,5]<-mean(tabela_resumo[1:10,5],na.rm=TRUE)
    tabela_resumo[11,6]<-mean(tabela_resumo[1:10,6],na.rm=TRUE)
    tabela_resumo[12,1]<-'sd'
    tabela_resumo[12,2]<-sd(tabela_resumo[1:10,2],na.rm=TRUE)
    tabela_resumo[12,3]<-sd(tabela_resumo[1:10,3],na.rm=TRUE)
    tabela_resumo[12,4]<-sd(tabela_resumo[1:10,4],na.rm=TRUE)
    tabela_resumo[12,5]<-sd(tabela_resumo[1:10,5],na.rm=TRUE)
    tabela_resumo[12,6]<-sd(tabela_resumo[1:10,6],na.rm=TRUE)
    print(tabela_resumo[11:12,])
    print("------------------------------------------------------------------")
  }
  
}
undersampling_byclusters<-function(x,TARGET=c(),groupby=c(),exclude_feature=c(),noise_filter=c(0.025,0.975),n_balance=1000,seed=123,add_idsample=F,rm_cluster_bychisquare=T){
  dtini<-Sys.time()
  
  cluster_max<-8
  decimal_places<-4
  N_min_group<-45
  colunas_semclusters<-c()
  dataset_temp<-x
  dataset_temp$cluster<-''
  dataset_temp$cluster_principal<-''
  
  #verifica se a variável TARGET é dummy(classificação)
  if(length(TARGET)==0){
    perce_original <- c()
  }else{
    if(((NROW(dataset_temp[dataset_temp[,TARGET]==0,])+NROW(dataset_temp[dataset_temp[,TARGET]==1,]))==NROW(dataset_temp))){
      perce_original <- NROW(dataset_temp[dataset_temp[,TARGET]==1,])/NROW(dataset_temp)
    }else{
      perce_original <- c()}
  }
  
  #identifica colunas iniciais, as numéricas, remove as não desejadas definidas 
  colunas_iniciais<-colnames(dataset_temp)
  colunas_numericas <- colnames(dataset_temp[,unlist(lapply(dataset_temp, is.numeric))])
  colunas_numericas <- setdiff(colunas_numericas,exclude_feature)
  
  #Se existir o conjunto de variáveis e número de clusters, separa para conhecer a variáveis que vão compor o cluster principal
  if(length(groupby)>0){
    for (coluna in groupby){
      coluna<-unlist(strsplit(coluna,';'))
      colunas_semclusters<-c(colunas_semclusters,coluna[1])}
  }else{
    #se não forem definidas as variáveis e seus clusters, todas variáveis numéricas serão amostradas
    colunas_semclusters<-colunas_numericas}
  
  
  #Serve para amostrar todas as colunas, caso contrário somente as definidas no groupby
  if(length(groupby)==0){
    
    temp_ncol_ACUM<-c()
    #código para identificar se existem mais dados distintos que número de clusters desejado
    vetor_col_valor<-apply(dataset_temp[,colunas_numericas,drop=F], 2, function(x) ifelse(length(unique(x))>=cluster_max,cluster_max,length(unique(round(x,decimal_places)))))
    temp_ncol<-data.frame(nome=colunas_numericas,valor=vetor_col_valor)
    for(coluna_num in colunas_numericas){  
      
      vetor<-seq(1:cluster_max) 
      if(min(temp_ncol[temp_ncol[,1]==coluna_num,2])<=cluster_max){
        vetor<-vetor[vetor<=min(temp_ncol[temp_ncol[,1]==coluna_num,2])]}	  
      
      wss<-data.frame(n=vetor,wss=0,perce=0,id=0)
      for (i in wss[,1])wss[wss[,1]==i,2] <- sum(kmeans(scale(dataset_temp[,coluna_num,drop=F]),centers=i,iter.max = 100, nstart = 21)$withinss)
      for (i in wss[,1])wss[wss[,1]==i,3]<-((wss[wss[,1]==i,2]-min(wss[,2]))/(max(wss[,2])-min(wss[,2])))
      for (i in 2:length(wss[,1]))wss[i,4]<-ifelse((wss[i-1,3]-wss[i,3])<=0.045,1,0)
      wss[length(wss[,1]),4]<-1 #marca a última linha para sempre haver uma resposta
      ncluster<-min(wss[wss[,4]==1,1])
      temp_ncol_ACUM<-c(temp_ncol_ACUM,ncluster)
      print(paste0(coluna_num,';',ncluster))
    }
    temp_ncol<-temp_ncol_ACUM
    groupby <- paste0(colunas_numericas,";",temp_ncol)
  }
  print(groupby)
  
  
  #Apenas para fazer um print dos clusters gerados individualmente
  itemp<-1
  for (coluna in groupby){		
    #se separado com ; existe o número de cluster definido
    ncluster_definido<-unlist(strsplit(coluna,';'))[2]
    n_clusters<-as.numeric(ncluster_definido)
    coluna<-unlist(strsplit(coluna,';'))[1]		
    
    print(coluna)
    mydata <- dataset_temp[,coluna,drop=FALSE]
    
    set.seed(seed)
    n_clusters<-apply(mydata, 2, function(x) ifelse(length(unique(x))>=n_clusters,n_clusters,length(unique(x))))
    datasetCluster <- kmeans(mydata, centers = n_clusters, iter.max = 20, nstart = 17,algorithm = c("Hartigan-Wong"))
    if(datasetCluster$ifault==4) {datasetCluster<-kmeans(mydata, centers = ifelse(n_clusters==1,1,n_clusters-1), iter.max = 100, nstart = 18,algorithm = c("MacQueen"))}
    
    dataset_temp$cluster_temp<-paste(coluna,"."	,datasetCluster$cluster,";", sep="")
    dataset_temp$cluster <- paste(dataset_temp$cluster, dataset_temp$cluster_temp, sep="")
    
    if((coluna %in% colunas_numericas)){
      formula_aggregate<- as.formula(paste("cbind(",TARGET,",",coluna,") ~ cluster_temp"))
      detalhe_cluster<- aggregate(formula_aggregate, data=dataset_temp,FUN= {function(x) c(avg=mean(x), sd=sd(x), count=length(x),min=min(x),max=max(x),sum=sum(x))})
      detalhe_cluster<-data.frame(cluster2=detalhe_cluster$cluster_temp,avg=format(round(detalhe_cluster[,coluna][,1], decimal_places), nsmall = decimal_places),sd=format(round(detalhe_cluster[,coluna][,2], decimal_places), nsmall = decimal_places),qtde=detalhe_cluster[,coluna][,3],
                                  min_max=paste(coluna,format(round(detalhe_cluster[,coluna][,4], decimal_places), nsmall = decimal_places),'~',format(round(detalhe_cluster[,coluna][,5], decimal_places), nsmall = decimal_places),';', sep=""),
                                  tg_avg=format(round(detalhe_cluster[,TARGET][,1], decimal_places), nsmall = decimal_places),tg_sum=detalhe_cluster[,TARGET][,6],stringsAsFactors = FALSE)
      
      #Realizaçao do teste QuiQuadrado
      if(length(perce_original)>0){
        detalhe_cluster$esperado<- sum(detalhe_cluster$tg_sum)/sum(detalhe_cluster$qtde)*detalhe_cluster$qtde
        detalhe_cluster$chiquadrado_temp<-((abs(detalhe_cluster$tg_sum-detalhe_cluster$esperado))^2)/detalhe_cluster$esperado
        detalhe_cluster$chiquadrado<-round(sum(detalhe_cluster$chiquadrado_temp),4)
        detalhe_cluster$chiquadrado_crit99<-round(qchisq(.99, df=(NROW(detalhe_cluster)-1)),4)
        detalhe_cluster$chiquadrado_p<-round(pchisq(detalhe_cluster$chiquadrado, df=(NROW(detalhe_cluster)-1), lower.tail=FALSE),4)
        detalhe_cluster$chiquadrado_temp<-NULL
        detalhe_cluster$esperado<-NULL
      }
      
      if(!exists("acumulador_infocluster")){
        acumulador_infocluster<-detalhe_cluster
      }else{
        acumulador_infocluster<-rbind(acumulador_infocluster,detalhe_cluster)}
      
      #se o teste quiquadrado idenficar irrelevancia, não adiciona o cluster
      id_rm<-F
      if(length(perce_original)>0){
        if(rm_cluster_bychisquare==T & max(detalhe_cluster$chiquadrado_p)>0.01){id_rm<-T}}
      
      if(id_rm==F){
        dataset_temp[,paste0("V",itemp)]<-paste(coluna,"."	,datasetCluster$cluster,";", sep="")
        itemp<-itemp+1
        dataset_temp$cluster_principal <- paste(dataset_temp$cluster_principal, dataset_temp$cluster_temp, sep="")}
      
    }
    
    gc()
    dataset_temp$cluster_temp<-NULL	
    rm(mydata,datasetCluster)
    
  }
  
  print(acumulador_infocluster)
  
  
  itemp<-itemp-1
  new_columns_names<-paste0("V",seq(1:itemp))
  dataset_temp$um<-1	
  dataset_temp$ID_AMOSTRA<-0
  dataset_temp$cluster_temp<-1
  cluster_temp<-c(1)
  
  
  NROW0<-NROW(dataset_temp[dataset_temp[,TARGET]==0,])
  NROW1<-NROW(dataset_temp[dataset_temp[,TARGET]==1,])
  dataset_temp[dataset_temp[,TARGET]==0,'rownum0']<-sample(1:NROW0, NROW0, replace=FALSE)
  dataset_temp[dataset_temp[,TARGET]==0 & dataset_temp[,'rownum0']<=NROW1,'ID_AMOSTRA']<-1
  dataset_temp[dataset_temp[,TARGET]==1,'ID_AMOSTRA']<-1
  dataset_temp[,'rownum0']<-NULL
  
  if(length(perce_original)>0){
    print("Proporcao original...")
    print(cbind(freq=table(dataset_temp[,TARGET]), perc=prop.table(table(dataset_temp[,TARGET]))*100))}
  
  if(length(perce_original)>0){
    print("Após selecao randomizada simples e balanceada...")
    print(cbind(freq=table(dataset_temp[dataset_temp[,'ID_AMOSTRA']>0,TARGET]), perc=prop.table(table(dataset_temp[dataset_temp[,'ID_AMOSTRA']>0,TARGET]))*100))}
  
  
  for(i in new_columns_names){
    formula_aggregate  <- as.formula(paste("um", "~", i))	
    qtde_groupby<- aggregate(formula_aggregate, data=dataset_temp,FUN=sum)
    vetor_groupby<- qtde_groupby[order(qtde_groupby[,2]),1]
    cluster_n<- NROW(qtde_groupby)#qtde de cluster de cada variável, por vir da agregaçao, posso contar as linhas
    print(i)
    print(cluster_n)
    
    for (j in vetor_groupby){
      n_balance_loop<-n_balance
      vetor0<-dataset_temp[,i]==j
      NROW_LOOP<-NROW(dataset_temp[vetor0,])
      n_balance_loop<-ifelse(n_balance_loop>NROW_LOOP,NROW_LOOP,n_balance_loop)
      
      q_cluster_col<-quantile(dataset_temp[vetor0,coluna],probs = c(0.25,0.75))
      quantile_vector<- (dataset_temp[vetor0,coluna]==q_cluster_col[1] | dataset_temp[vetor0,coluna]==q_cluster_col[2])
      if(sum(quantile_vector)<10){
        #garante a retirada de amostra do 1 e 2 quartil de cada subcluster, mas não em var dummy
        dataset_temp[quantile_vector,'ID_AMOSTRA']<-1 }
      
      
      #amostra aleatoriamente a quantidade mínima antes mesmo da clusterizacao
      dataset_temp[vetor0 ,'rownum']<-sample(1:NROW_LOOP, NROW_LOOP, replace=FALSE)
      vetor_rownum<-vetor0 & dataset_temp[,'rownum']<=n_balance_loop
      soma_rownum<-sum(vetor_rownum)
      dataset_temp[vetor_rownum,'ID_AMOSTRA']<-(soma_rownum:1)/soma_rownum
      
      coluna<-read.table(text = j, sep = ".", colClasses = "character",stringsAsFactors=F)
      coluna<-coluna[,1]
      n_centers<-apply(dataset_temp[vetor0,coluna,drop=FALSE], 2, function(x) ifelse(length(unique(x))>=cluster_n,cluster_n,length(unique(x))))
      
      if(NROW_LOOP>n_balance_loop){
        if(n_centers>=2){
          datasetCluster <- kmeans(dataset_temp[vetor0,coluna,drop=FALSE], centers = n_centers, iter.max = 20, nstart = 25)
          if(datasetCluster$ifault==4){datasetCluster<-kmeans(dataset_temp[vetor0,coluna,drop=FALSE], centers = n_centers-1, iter.max = 100, nstart = 26,algorithm = c("MacQueen"))}
          dataset_temp[vetor0,'cluster_temp']<-datasetCluster$cluster
          n_balance_loop<-n_balance_loop/n_centers
          
          #ORDENA PARA CLUSTER COM MENOS DADOS SEJAM AMOSTRADOS NA PLENITUDE E DOEM SEUS SALDOS
          qtde_groupby<- aggregate(as.formula(paste("um ~ cluster_temp")), data=dataset_temp,FUN=length)
          cluster_temp<- qtde_groupby[order(qtde_groupby[,2]),1]
        }else{cluster_temp<-c(1)}
      }
      
      n_extra<-0
      for(v in cluster_temp){
        vetor_temp<-vetor0 & dataset_temp[,'cluster_temp']==v
        
        q_cluster_col<-quantile(dataset_temp[vetor_temp,coluna],probs = c(0.25,0.75))
        quantile_vector<-dataset_temp[vetor_temp,coluna]==q_cluster_col[1] | dataset_temp[vetor_temp,coluna]==q_cluster_col[2] 
        if(sum(quantile_vector)<10){
          #garante a retirada de amostra do 1 e 2 quartil de cada subcluster, mas não em var dummy
          dataset_temp[quantile_vector,'ID_AMOSTRA']<-1}
        
        vetor_temp_nao_amostrado<-vetor_temp & dataset_temp[,'ID_AMOSTRA']==0
        NROW_LOOP0<-sum(vetor_temp_nao_amostrado)
        NROW_LOOP1<-sum(vetor_temp & dataset_temp[,'ID_AMOSTRA']>0)
        dataset_temp[vetor_temp_nao_amostrado,'rownum0']<-sample(1:NROW_LOOP0, NROW_LOOP0, replace=FALSE)
        if(NROW_LOOP1<n_balance_loop){
          vetor_rownum<-vetor_temp_nao_amostrado & dataset_temp[,'rownum0']<=n_balance_loop
          soma_rownum<-sum(vetor_rownum)
          dataset_temp[vetor_rownum,'ID_AMOSTRA']<-(soma_rownum:1)/soma_rownum}
      }
    }		
  }
  dataset_temp[dataset_temp[,TARGET]==1,'ID_AMOSTRA']<-1
  dataset_temp$cluster_temp<-NULL
  
  if(length(perce_original)>0){
    print("Após amostragem clusterizada...")
    print(cbind(freq=table(dataset_temp[dataset_temp[,'ID_AMOSTRA']>0,TARGET]), perc=prop.table(table(dataset_temp[dataset_temp[,'ID_AMOSTRA']>0,TARGET]))*100))}
  
  
  #Utilizado para pegar combinação dos cluster com poucos dados, utilizado um pouco antes da final da função 
  df_cluster<- aggregate(as.formula(paste("cbind(",TARGET,",ID_AMOSTRA) ~ cluster_principal")),data=dataset_temp,FUN={function(x) c(count=length(x),avg=mean(x),soma=sum(ifelse(x>0,1,0)))})
  df_cluster<- data.frame(cluster_principal=df_cluster$cluster_principal,count=df_cluster[,TARGET][,1],avg=df_cluster[,TARGET][,2],sum_sample=df_cluster[,"ID_AMOSTRA"][,3],stringsAsFactors=FALSE)
  qtde_clusters<-NROW(df_cluster)
  df_cluster$cluster_simples<-1:qtde_clusters #mudança da chave complexa do cluster para um número mais simples
  dataset_temp<-merge(dataset_temp,df_cluster)
  #print(df_cluster[order(-df_cluster[,'sum_sample']),])
  print(paste0(qtde_clusters," clusters combinados"))
  
  
  #aplicaçao da agregação identificada acima para pegar N_min_group amostras
  if(length(perce_original)>0){
    vetor_redundancia<-df_cluster[df_cluster[,'sum_sample']>N_min_group & df_cluster[,3]<=noise_filter[1],'cluster_simples'] #classificador
  }else{
    vetor_redundancia<-df_cluster[df_cluster[,'sum_sample']>N_min_group,'cluster_simples']} #regressor
  
  for(cluster_loop in vetor_redundancia){
    
    if(length(perce_original)>0){
      vetor_n_amostra<-dataset_temp[,'cluster_simples'] == cluster_loop & dataset_temp[,'ID_AMOSTRA']>0 & dataset_temp[,TARGET] == 0
    }else{
      vetor_n_amostra<-dataset_temp[,'cluster_simples'] == cluster_loop & dataset_temp[,'ID_AMOSTRA']>0}
    n_amostra<-sum(vetor_n_amostra)
    
    dataset_temp[vetor_n_amostra,'rownumber']<-sample(1:n_amostra, n_amostra, replace=FALSE)
    dataset_temp[vetor_n_amostra & dataset_temp[,'rownumber']>N_min_group,'ID_AMOSTRA']<-0
    
    #correcao do já que algumas amostras foram excluidas
    if(length(perce_original)>0){
      vetor_n_amostra<-dataset_temp[,'cluster_simples'] == cluster_loop & dataset_temp[,'ID_AMOSTRA']>0 & dataset_temp[,TARGET] == 0
    }else{
      vetor_n_amostra<-dataset_temp[,'cluster_simples'] == cluster_loop & dataset_temp[,'ID_AMOSTRA']>0}
    soma_n_amostra<-sum(vetor_n_amostra)
    dataset_temp[vetor_n_amostra,'ID_AMOSTRA']<-(soma_n_amostra:1)/soma_n_amostra
    
  }
  
  if(length(perce_original)>0){
    print("Após eliminação de redundância e possível incremento de registros...")
    print(cbind(freq=table(dataset_temp[dataset_temp[,'ID_AMOSTRA']>0,TARGET]), perc=prop.table(table(dataset_temp[dataset_temp[,'ID_AMOSTRA']>0,TARGET]))*100))}
  
  #limpar ruido
  if(length(perce_original)>0){
    
    if(mean(df_cluster[df_cluster[,3]>0,3])>noise_filter[1]){#Somente se a média de defeito dos clusters que o tiveram forem acima do ruído, então aplicar o noise reduction inferior, 
      #noise reduction LOW
      for(cluster_loop in df_cluster[df_cluster[,3]>0 & df_cluster[,3]<=noise_filter[1],1]){
        dataset_temp[dataset_temp[,'cluster_principal'] == cluster_loop & dataset_temp[,TARGET]==1,'ID_AMOSTRA']<-0}
      
      print("Após eliminacao ruidos em grupos predominantemente sem defeitos")
      print(cbind(freq=table(dataset_temp[dataset_temp[,'ID_AMOSTRA']>0,TARGET]), perc=prop.table(table(dataset_temp[dataset_temp[,'ID_AMOSTRA']>0,TARGET]))*100))}
    
    #noise reduction high
    for(cluster_loop in df_cluster[df_cluster[,3]>=noise_filter[2],1]){
      dataset_temp[dataset_temp[,'cluster_principal'] == cluster_loop & dataset_temp[,TARGET]==0,'ID_AMOSTRA']<-0}
    
    print("Após eliminacao ruidos em grupos predominantemente com defeitos")
    print(cbind(freq=table(dataset_temp[dataset_temp[,'ID_AMOSTRA']>0,TARGET]), perc=prop.table(table(dataset_temp[dataset_temp[,'ID_AMOSTRA']>0,TARGET]))*100))
  }
  
  if(add_idsample==T){colunas_iniciais<-c(colunas_iniciais,'ID_AMOSTRA')}
  dataset_temp<-dataset_temp[dataset_temp[,'ID_AMOSTRA']>0,]
  dataset_temp$ID_AMOSTRA<-(1-dataset_temp$ID_AMOSTRA)
  
  dataset_temp<-dataset_temp[,colunas_iniciais]
  dataset_temp <-dataset_temp[,c(setdiff(colnames(dataset_temp),TARGET),TARGET)]
  print(paste0(dtini,' ~ ',Sys.time()))
  
  return(dataset_temp)	
}


#--------------------------------------
#dataframe com dados aleatórios com n registros
set.seed(1)
n<-100000
A<-runif(n,min=10,max=50)
B1<-rnorm(n,15,2)
B2<-rnorm(n,30,4)
splits<-runif(n)>=0.80
B<-c(B1[splits],B2[!splits])
C1<-rnorm(n,5,2)
C2<-rnorm(n,15,3)
splits<-runif(n)<=0.75
C<-c(C1[splits],C2[!splits])
hist(B) 
D<-ifelse(runif(n)<0.3,1,0)
E1<-rnorm(n,7,2)
E2<-rnorm(n,13,4)
splits<-runif(n)>=0.80
E<-c(E1[splits],E2[!splits])
G<-sqrt(rnorm(n,20,1.5))
H<-log(rnorm(n,30,2.5)+1)
data_set<- data.frame(a=A,b=B,c=C,d=D,e=E,g=G,h=H)
data_set$I<- ifelse(A>=quantile(A,0.05) & A<=quantile(A,0.25) & B>=quantile(B,0.75) & C>quantile(C,0.50) & C<quantile(C,0.90) & E<=quantile(E,0.30) & G<=quantile(G,0.50),1,0) #geracao da target
TRAIN_VECTOR<-c('a','b','c','e','g','h')

#Define variável de interesse----------------------
TARGET<-c('I')
mean(data_set$I)*100

#Retira  amostra da populacao bruta----------------
splits<-runif(nrow(data_set))<=0.20
dataset_amostra<-data_set[splits,]
data_set<-data_set[!splits,]

#treino com na base integral --------------------------------------
tipo_amostragem<-paste("Tipo Populacao: balanceamento original ",NROW(data_set[data_set[,TARGET]==1,]), "/",NROW(data_set),"=",round(NROW(data_set[data_set[,TARGET]==1,])/NROW(data_set)*100,2),"%")
dtini<-Sys.time()
classifier <- randomForest(x = data_set[,TRAIN_VECTOR],y = factor(ifelse(data_set[,TARGET]==1, 'Y', 'N')),mtry =5,ntree = 500,keep.forest=TRUE)#,importance=TRUE)
dtfim<-Sys.time()
y_pred <- predict(classifier, newdata = dataset_amostra[complete.cases(dataset_amostra[,TRAIN_VECTOR]),TRAIN_VECTOR],type="prob")
nfold_check(dataset_amostra[complete.cases(dataset_amostra[,TRAIN_VECTOR]),TARGET],y_pred[,"Y"],infoextra=paste0(dtini,' ~ ',dtfim), infoextra2=tipo_amostragem)



#--------------------------------------
#Amostragem aleatória simples----------------
df_aletsimples<-rbind(sample_n(data_set[data_set[,TARGET]==0,],NROW(data_set[data_set[,TARGET]==1,]),replace=FALSE),data_set[data_set[,TARGET]==1,])
#amostragem smote----------------
library(DMwR)
data_smote<-data_set
data_smote[,TARGET] <- as.factor(data_smote[,TARGET])
data_smote <- SMOTE(as.formula(paste(TARGET, "~", paste(TRAIN_VECTOR, collapse="+"))),data= data_smote,k=5, perc.over = 200, perc.under=200)
data_smote[,TARGET]<-as.numeric(levels(data_smote[,TARGET]))[data_smote[,TARGET]]
##AMostragem clusterizada--------------------------------------
#variável a com 5 clusters, variável b com 5 clusters e por aí vai...
manual_group<-c('a;5','b;5','c;5','d;5','e;5','g;5','h;5')
#manual_group<-c() #a funçao define a quantidade de clusters
data_set<-undersampling_byclusters(x=data_set,TARGET=TARGET,groupby=manual_group,add_idsample=T,n_balance=1200)
#--------------------------------------


#Modelo com treinamento baseado em balanceamento aleatório simples--------------------------------------
tipo_amostragem<-paste("Tipo Amostragem: Aleatória Simples ",NROW(df_aletsimples[df_aletsimples[,TARGET]==1,]), "/",NROW(df_aletsimples),"=",round(NROW(df_aletsimples[df_aletsimples[,TARGET]==1,])/NROW(df_aletsimples)*100,2),"%")
dtini<-Sys.time()
classifier <- randomForest(x = df_aletsimples[,TRAIN_VECTOR],y = factor(ifelse(df_aletsimples[,TARGET]==1, 'Y', 'N')),mtry =5,ntree = 500,keep.forest=TRUE)#,importance=TRUE)
dtfim<-Sys.time()
y_pred <- predict(classifier, newdata = dataset_amostra[complete.cases(dataset_amostra[,TRAIN_VECTOR]),TRAIN_VECTOR],type="prob")
nfold_check(dataset_amostra[complete.cases(dataset_amostra[,TRAIN_VECTOR]),TARGET],y_pred[,"Y"],infoextra=paste0(dtini,' ~ ',dtfim), infoextra2=tipo_amostragem)

#--------------------------------------
#Modelo com treinamento baseado em balanceamento SMOTE
tipo_amostragem<-paste("Tipo Amostragem: SMote ",NROW(data_smote[data_smote[,TARGET]==1,]), "/",NROW(data_smote),"=",round(NROW(data_smote[data_smote[,TARGET]==1,])/NROW(data_smote)*100,2),"%")
dtini<-Sys.time()
classifier <- randomForest(x = data_smote[,TRAIN_VECTOR],y = factor(ifelse(data_smote[,TARGET]==1, 'Y', 'N')),mtry =5,ntree = 500,keep.forest=TRUE)#,importance=TRUE)
dtfim<-Sys.time()
y_pred <- predict(classifier, newdata = dataset_amostra[complete.cases(dataset_amostra[,TRAIN_VECTOR]),TRAIN_VECTOR],type="prob")
nfold_check(dataset_amostra[complete.cases(dataset_amostra[,TRAIN_VECTOR]),TARGET],y_pred[,"Y"],infoextra=paste0(dtini,' ~ ',dtfim), infoextra2=tipo_amostragem)

#Modelo com treinamento baseado em amostragem clusterizada variando sua amostra conforme percentuais definidos 0.05, 0.10 e ...
for(i in c(0.25,0.50,0.75,1.0)){
  print(paste(i*100,"% da amostra clusterizada original"))
  tipo_amostragem<-paste("Tipo Amostragem: Clusterizada ",NROW(data_set[data_set[,TARGET]==1,]), "/",NROW(data_set[data_set$ID_AMOSTRA<=i,]),"=",round(NROW(data_set[data_set[,TARGET]==1 & data_set$ID_AMOSTRA<=i,])/NROW(data_set[data_set$ID_AMOSTRA<=i,])*100,2),"%")
  dtini<-Sys.time()
  classifier <- randomForest(x = data_set[data_set$ID_AMOSTRA<=i,TRAIN_VECTOR],y = factor(ifelse(data_set[data_set$ID_AMOSTRA<=i,TARGET]==1, 'Y', 'N')),mtry =5,ntree = 500,keep.forest=TRUE)#,importance=TRUE)
  dtfim<-Sys.time()
  y_pred <- predict(classifier, newdata = dataset_amostra[complete.cases(dataset_amostra[,TRAIN_VECTOR]),TRAIN_VECTOR],type="prob")
  nfold_check(dataset_amostra[complete.cases(dataset_amostra[,TRAIN_VECTOR]),TARGET],y_pred[,"Y"],infoextra=paste0(dtini,' ~ ',dtfim), infoextra2=tipo_amostragem)
} 
